# -*- coding: utf-8 -*-
"""ames_house_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DniMSlPGtbMVkUgL8-GwHnDJkBkuyeFt
"""



from sklearn.datasets import fetch_openml
var =fetch_openml(name="house_prices",as_frame=True)
#ames house price dataset

import pandas as pd
df=pd.DataFrame(var.data,columns=var.feature_names)

df.tail()

df.info

df.head()

df['MEDV']=var.target

df.head()

"""

---



---

"""

x1=df[['LotFrontage','LotArea']]
y1=df[['MEDV']]

from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression
from sklearn import metrics

x_train,x_test,y_train,y_test=train_test_split(x1,y1,test_size=0.33,random_state=5)

from sklearn.impute import SimpleImputer

# Create an imputer object with strategy (mean, median, etc.)
imputer = SimpleImputer(strategy='mean')

# Fit the imputer to your data and transform it
x_train_imputed = imputer.fit_transform(x_train)
y_train_imputed = imputer.fit_transform(y_train)
# Assuming you have already created and fitted an imputer object called 'imputer' on your training data

# Transform the testing data using the same imputer object
x_test_imputed = imputer.fit_transform(x_test)

# Now, x_test_imputed contains your testing data with missing values imputed
y_test_imputed=imputer.fit_transform(y_test)

# Now, x_train_imputed and y_train_imputed contain your data with missing values imputed
# Ensure both y_test_imputed and y_pred are one-dimensional arrays
y_test_imputed = y_test_imputed.ravel()


# Create DataFrame

reg=LinearRegression()
reg.fit(x_train_imputed,y_train_imputed)
y_pred=reg.predict(x_test_imputed)
y_pred = y_pred.ravel()
bdf=pd.DataFrame({'Actual':y_test_imputed,'Predicted':y_pred})
bdf

import matplotlib.pyplot as plt
plt.scatter(y_test_imputed,y_pred)
plt.show()

metrics.mean_absolute_error(y_test_imputed,y_pred)

metrics.mean_squared_error(y_test_imputed,y_pred)

metrics.r2_score(y_test_imputed,y_pred)

from sklearn.tree import DecisionTreeRegressor
import pandas as pd
from sklearn.impute import SimpleImputer

# Assuming you already have x_train_imputed, y_train_imputed, and x_test_imputed from previous steps

# Create a DecisionTreeRegressor object
regressor = DecisionTreeRegressor()

# Fit the model on the training data
regressor.fit(x_train_imputed, y_train_imputed)

# Predict on the testing data
y_pred = regressor.predict(x_test_imputed)

# Ensure both y_test_imputed and y_pred are one-dimensional arrays
y_test_imputed = y_test_imputed.ravel()
y_pred = y_pred.ravel()

# Create DataFrame to compare actual and predicted values
bdf = pd.DataFrame({'Actual': y_test_imputed, 'Predicted': y_pred})

# Now you can analyze bdf to see how well the Decision Tree model performed

bdf

plt.scatter(y_test_imputed,y_pred)
plt.show()

metrics.mean_absolute_error(y_test_imputed,y_pred)

metrics.mean_squared_error(y_test_imputed,y_pred)

metrics.r2_score(y_test_imputed,y_pred)

